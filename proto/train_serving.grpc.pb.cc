// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: train_serving.proto

#include "train_serving.pb.h"
#include "train_serving.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace wt {

static const char* Caca_method_names[] = {
  "/wt.Caca/score",
  "/wt.Caca/training",
};

std::unique_ptr< Caca::Stub> Caca::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Caca::Stub> stub(new Caca::Stub(channel));
  return stub;
}

Caca::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_score_(Caca_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_training_(Caca_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Caca::Stub::score(::grpc::ClientContext* context, const ::wt::PredictRequest& request, ::wt::PredictReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_score_, context, request, response);
}

void Caca::Stub::experimental_async::score(::grpc::ClientContext* context, const ::wt::PredictRequest* request, ::wt::PredictReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, std::move(f));
}

void Caca::Stub::experimental_async::score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wt::PredictReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, std::move(f));
}

void Caca::Stub::experimental_async::score(::grpc::ClientContext* context, const ::wt::PredictRequest* request, ::wt::PredictReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, reactor);
}

void Caca::Stub::experimental_async::score(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wt::PredictReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_score_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wt::PredictReply>* Caca::Stub::AsyncscoreRaw(::grpc::ClientContext* context, const ::wt::PredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wt::PredictReply>::Create(channel_.get(), cq, rpcmethod_score_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wt::PredictReply>* Caca::Stub::PrepareAsyncscoreRaw(::grpc::ClientContext* context, const ::wt::PredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wt::PredictReply>::Create(channel_.get(), cq, rpcmethod_score_, context, request, false);
}

::grpc::Status Caca::Stub::training(::grpc::ClientContext* context, const ::wt::TrainRequest& request, ::wt::TrainReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_training_, context, request, response);
}

void Caca::Stub::experimental_async::training(::grpc::ClientContext* context, const ::wt::TrainRequest* request, ::wt::TrainReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_training_, context, request, response, std::move(f));
}

void Caca::Stub::experimental_async::training(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wt::TrainReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_training_, context, request, response, std::move(f));
}

void Caca::Stub::experimental_async::training(::grpc::ClientContext* context, const ::wt::TrainRequest* request, ::wt::TrainReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_training_, context, request, response, reactor);
}

void Caca::Stub::experimental_async::training(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wt::TrainReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_training_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wt::TrainReply>* Caca::Stub::AsynctrainingRaw(::grpc::ClientContext* context, const ::wt::TrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wt::TrainReply>::Create(channel_.get(), cq, rpcmethod_training_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wt::TrainReply>* Caca::Stub::PrepareAsynctrainingRaw(::grpc::ClientContext* context, const ::wt::TrainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wt::TrainReply>::Create(channel_.get(), cq, rpcmethod_training_, context, request, false);
}

Caca::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Caca_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Caca::Service, ::wt::PredictRequest, ::wt::PredictReply>(
          std::mem_fn(&Caca::Service::score), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Caca_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Caca::Service, ::wt::TrainRequest, ::wt::TrainReply>(
          std::mem_fn(&Caca::Service::training), this)));
}

Caca::Service::~Service() {
}

::grpc::Status Caca::Service::score(::grpc::ServerContext* context, const ::wt::PredictRequest* request, ::wt::PredictReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Caca::Service::training(::grpc::ServerContext* context, const ::wt::TrainRequest* request, ::wt::TrainReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace wt

